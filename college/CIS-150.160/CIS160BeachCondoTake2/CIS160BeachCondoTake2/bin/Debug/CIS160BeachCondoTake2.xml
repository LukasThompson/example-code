<?xml version="1.0"?>
<doc>
<assembly>
<name>
CIS160BeachCondoTake2
</name>
</assembly>
<members>
<member name="T:CIS160BeachCondoTake2.Common.NavigationHelper">
 <summary>
 NavigationHelper aids in navigation between pages.  It provides commands used to 
 navigate back and forward as well as registers for standard mouse and keyboard 
 shortcuts used to go back and forward in Windows and the hardware back button in
 Windows Phone.  In addition it integrates SuspensionManger to handle process lifetime
 management and state management when navigating between pages.
 </summary>
 <remarks>
 <example>
 To make use of NavigationHelper, follow these two steps or
 start with a BasicPage or any other Page item template other than BlankPage.
 
 1) Create an instance of the NaivgationHelper somewhere such as in the 
     constructor for the page and register a callback for the LoadState and 
     SaveState events.
 <code>
     Public NotInheritable Class MyPage
         Inherits Page
 
         Public Sub New()
             InitializeComponent();
             Me._navigationHelper = New Common.NavigationHelper(Me)
             AddHandler Me._navigationHelper.LoadState, AddressOf NavigationHelper_LoadState
             AddHandler Me._navigationHelper.SaveState, AddressOf NavigationHelper_SaveState
         End Sub
     
     Private Sub NavigationHelper_LoadState(sender As Object, e As Common.LoadStateEventArgs)
     End Sub
 
     Private Sub NavigationHelper_SaveState(sender As Object, e As Common.SaveStateEventArgs)
     End Sub
 </code>
 
 2) Register the page to call into the NavigationHelper whenever the page participates 
     in navigation by overriding the <see cref="M:Windows.UI.Xaml.Controls.Page.OnNavigatedTo(Windows.UI.Xaml.Navigation.NavigationEventArgs)"/> 
     and <see cref="M:Windows.UI.Xaml.Controls.Page.OnNavigatedFrom(Windows.UI.Xaml.Navigation.NavigationEventArgs)"/> events.
 <code>
     Protected Overrides Sub OnNavigatedTo(e As NavigationEventArgs)
         _navigationHelper.OnNavigatedTo(e)
     
     Protected Overrides Sub OnNavigatedFrom(e As NavigationEventArgs)
         _navigationHelper.OnNavigatedFrom(e)
 </code>
 </example>
 </remarks>
</member>
<member name="M:CIS160BeachCondoTake2.Common.NavigationHelper.CoreDispatcher_AcceleratorKeyActivated(Windows.UI.Core.CoreDispatcher,Windows.UI.Core.AcceleratorKeyEventArgs)">
 <summary>
 Invoked on every keystroke, including system keys such as Alt key combinations, when
 this page is active and occupies the entire window.  Used to detect keyboard navigation
 between pages even when the page itself doesn't have focus.
 </summary>
 <param name="sender">Instance that triggered the event.</param>
 <param name="e">Event data describing the conditions that led to the event.</param>
</member>
<member name="M:CIS160BeachCondoTake2.Common.NavigationHelper.CoreWindow_PointerPressed(Windows.UI.Core.CoreWindow,Windows.UI.Core.PointerEventArgs)">
 <summary>
 Invoked on every mouse click, touch screen tap, or equivalent interaction when this
 page is active and occupies the entire window.  Used to detect browser-style next and
 previous mouse button clicks to navigate between pages.
 </summary>
 <param name="sender">Instance that triggered the event.</param>
 <param name="e">Event data describing the conditions that led to the event.</param>
</member>
<member name="M:CIS160BeachCondoTake2.Common.NavigationHelper.OnNavigatedTo(Windows.UI.Xaml.Navigation.NavigationEventArgs)">
 <summary>
 Invoked when this page is about to be displayed in a Frame.
 </summary>
 <param name="e">Event data that describes how this page was reached.  The Parameter
 property provides the group to be displayed.</param>
</member>
<member name="M:CIS160BeachCondoTake2.Common.NavigationHelper.OnNavigatedFrom(Windows.UI.Xaml.Navigation.NavigationEventArgs)">
 <summary>
 Invoked when this page will no longer be displayed in a Frame.
 </summary>
 <param name="e">Event data that describes how this page was reached.  The Parameter
 property provides the group to be displayed.</param>
</member>
<member name="T:CIS160BeachCondoTake2.Common.RelayCommand">
 <summary>
  
 </summary>
 <remarks></remarks>
</member>
<member name="T:CIS160BeachCondoTake2.Common.ObservableDictionary">
 <summary>
 Implementation of IObservableMap that supports reentrancy for use as a default
 view model.
 </summary>
</member>
<member name="T:CIS160BeachCondoTake2.Common.SuspensionManager">
 <summary>
 SuspensionManager captures global session state to simplify process lifetime management
 for an application.  Note that session state will be automatically cleared under a variety
 of conditions and should only be used to store information that would be convenient to
 carry across sessions, but that should be discarded when an application crashes or is
 upgraded.
 </summary>
</member>
<member name="P:CIS160BeachCondoTake2.Common.SuspensionManager.SessionState">
 <summary>
 Provides access to global session state for the current session.  This state is
 serialized by <see cref="M:CIS160BeachCondoTake2.Common.SuspensionManager.SaveAsync"/> and restored by
 <see cref="M:CIS160BeachCondoTake2.Common.SuspensionManager.RestoreAsync(System.String)"/>, so values must be serializable by
 <see cref="T:System.Runtime.Serialization.DataContractSerializer"/> and should be as compact as
 possible.  Strings and other self-contained data types are strongly recommended.
 </summary>
</member>
<member name="P:CIS160BeachCondoTake2.Common.SuspensionManager.KnownTypes">
 <summary>
 List of custom types provided to the <see cref="T:System.Runtime.Serialization.DataContractSerializer"/>
 when reading and writing session state.  Initially empty, additional types may be
 added to customize the serialization process.
 </summary>
</member>
<member name="M:CIS160BeachCondoTake2.Common.SuspensionManager.SaveAsync">
 <summary>
 Save the current <see cref="P:CIS160BeachCondoTake2.Common.SuspensionManager.SessionState"/>.  Any <see cref="T:Windows.UI.Xaml.Controls.Frame"/> instances
 registered with <see cref="M:CIS160BeachCondoTake2.Common.SuspensionManager.RegisterFrame(Windows.UI.Xaml.Controls.Frame,System.String,System.String)"/> will also preserve their current
 navigation stack, which in turn gives their active <see cref="T:Windows.UI.Xaml.Controls.Page"/> an opportunity
 to save its state.
 </summary>
 <returns>An asynchronous task that reflects when session state has been saved.</returns>
</member>
<member name="M:CIS160BeachCondoTake2.Common.SuspensionManager.RestoreAsync(System.String)">
 <summary>
 Restores previously saved <see cref="P:CIS160BeachCondoTake2.Common.SuspensionManager.SessionState"/>.  Any <see cref="T:Windows.UI.Xaml.Controls.Frame"/> instances
 registered with <see cref="M:CIS160BeachCondoTake2.Common.SuspensionManager.RegisterFrame(Windows.UI.Xaml.Controls.Frame,System.String,System.String)"/> will also restore their prior navigation
 state, which in turn gives their active <see cref="T:Windows.UI.Xaml.Controls.Page"/> an opportunity restore its
 state.
 </summary>
 <param name="sessionBaseKey">An optional key that identifies the type of session.
 This can be used to distinguish between multiple application launch scenarios.</param>
 <returns>An asynchronous task that reflects when session state has been read.  The
 content of <see cref="P:CIS160BeachCondoTake2.Common.SuspensionManager.SessionState"/> should not be relied upon until this task
 completes.</returns>
</member>
<member name="M:CIS160BeachCondoTake2.Common.SuspensionManager.RegisterFrame(Windows.UI.Xaml.Controls.Frame,System.String,System.String)">
 <summary>
 Registers a <see cref="T:Windows.UI.Xaml.Controls.Frame"/> instance to allow its navigation history to be saved to
 and restored from <see cref="P:CIS160BeachCondoTake2.Common.SuspensionManager.SessionState"/>.  Frames should be registered once
 immediately after creation if they will participate in session state management.  Upon
 registration if state has already been restored for the specified key
 the navigation history will immediately be restored.  Subsequent invocations of
 <see cref="M:CIS160BeachCondoTake2.Common.SuspensionManager.RestoreAsync(System.String)"/> will also restore navigation history.
 </summary>
 <param name="frame">An instance whose navigation history should be managed by
 <see cref="T:CIS160BeachCondoTake2.Common.SuspensionManager"/></param>
 <param name="sessionStateKey">A unique key into <see cref="P:CIS160BeachCondoTake2.Common.SuspensionManager.SessionState"/> used to
 store navigation-related information.</param>
 <param name="sessionBaseKey">An optional key that identifies the type of session.
 This can be used to distinguish between multiple application launch scenarios.</param>
</member>
<member name="M:CIS160BeachCondoTake2.Common.SuspensionManager.UnregisterFrame(Windows.UI.Xaml.Controls.Frame)">
 <summary>
 Disassociates a <see cref="T:Windows.UI.Xaml.Controls.Frame"/> previously registered by <see cref="M:CIS160BeachCondoTake2.Common.SuspensionManager.RegisterFrame(Windows.UI.Xaml.Controls.Frame,System.String,System.String)"/>
 from <see cref="P:CIS160BeachCondoTake2.Common.SuspensionManager.SessionState"/>.  Any navigation state previously captured will be
 removed.
 </summary>
 <param name="frame">An instance whose navigation history should no longer be
 managed.</param>
</member>
<member name="M:CIS160BeachCondoTake2.Common.SuspensionManager.SessionStateForFrame(Windows.UI.Xaml.Controls.Frame)">
 <summary>
 Provides storage for session state associated with the specified <see cref="T:Windows.UI.Xaml.Controls.Frame"/>.
 Frames that have been previously registered with <see cref="M:CIS160BeachCondoTake2.Common.SuspensionManager.RegisterFrame(Windows.UI.Xaml.Controls.Frame,System.String,System.String)"/> have
 their session state saved and restored automatically as a part of the global
 <see cref="P:CIS160BeachCondoTake2.Common.SuspensionManager.SessionState"/>.  Frames that are not registered have transient state
 that can still be useful when restoring pages that have been discarded from the
 navigation cache.
 </summary>
 <remarks>Apps may choose to rely on <see cref="T:CIS160BeachCondoTake2.Common.NavigationHelper"/> to manage
 page-specific state instead of working with frame session state directly.</remarks>
 <param name="frame">The instance for which session state is desired.</param>
 <returns>A collection of state subject to the same serialization mechanism as
 <see cref="P:CIS160BeachCondoTake2.Common.SuspensionManager.SessionState"/>.</returns>
</member>
<member name="T:CIS160BeachCondoTake2.App">
 <summary>
 Provides application-specific behavior to supplement the default Application class.
 </summary>
</member>
<member name="M:CIS160BeachCondoTake2.App.OnLaunched(Windows.ApplicationModel.Activation.LaunchActivatedEventArgs)">
 <summary>
 Invoked when the application is launched normally by the end user.  Other entry points
 will be used when the application is launched to open a specific file, to display
 search results, and so forth.
 </summary>
 <param name="e">Details about the launch request and process.</param>
</member>
<member name="M:CIS160BeachCondoTake2.App.OnNavigationFailed(System.Object,Windows.UI.Xaml.Navigation.NavigationFailedEventArgs)">
 <summary>
 Invoked when Navigation to a certain page fails
 </summary>
 <param name="sender">The Frame which failed navigation</param>
 <param name="e">Details about the navigation failure</param>
</member>
<member name="M:CIS160BeachCondoTake2.App.OnSuspending(System.Object,Windows.ApplicationModel.SuspendingEventArgs)">
 <summary>
 Invoked when application execution is being suspended.  Application state is saved
 without knowing whether the application will be terminated or resumed with the contents
 of memory still intact.
 </summary>
 <param name="sender">The source of the suspend request.</param>
 <param name="e">Details about the suspend request.</param>
</member>
<member name="T:CIS160BeachCondoTake2.ItemsPage">
 <summary>
 A page that displays a collection of item previews.  In the Split Application this page
 is used to display and select one of the available groups.
 </summary>
</member>
<member name="P:CIS160BeachCondoTake2.ItemsPage.NavigationHelper">
 <summary>
 NavigationHelper is used on each page to aid in navigation and 
 process lifetime management
 </summary>
</member>
<member name="P:CIS160BeachCondoTake2.ItemsPage.DefaultViewModel">
 <summary>
 This can be changed to a strongly typed view model.
 </summary>
</member>
<member name="M:CIS160BeachCondoTake2.ItemsPage.NavigationHelper_LoadState(System.Object,CIS160BeachCondoTake2.Common.LoadStateEventArgs)">
 <summary>
 Populates the page with content passed during navigation.  Any saved state is also
 provided when recreating a page from a prior session.
 </summary>
 <param name="sender">
 The source of the event; typically <see cref="P:CIS160BeachCondoTake2.ItemsPage.NavigationHelper"/>
 </param>
 <param name="e">Event data that provides both the navigation parameter passed to
 <see cref="M:Windows.UI.Xaml.Controls.Frame.Navigate(System.Type)"/> when this page was initially requested and
 a dictionary of state preserved by this page during an earlier
 session.  The state will be null the first time a page is visited.</param>
</member>
<member name="M:CIS160BeachCondoTake2.ItemsPage.ItemView_ItemClick(System.Object,Windows.UI.Xaml.Controls.ItemClickEventArgs)">
 <summary>
 Invoked when an item is clicked.
 </summary>
 <param name="sender">The GridView (or ListView when the application is snapped)
 displaying the item clicked.</param>
 <param name="e">Event data that describes the item clicked.</param>
</member>
<member name="M:CIS160BeachCondoTake2.ItemsPage.OnNavigatedTo(Windows.UI.Xaml.Navigation.NavigationEventArgs)">
 The methods provided in this section are simply used to allow
 NavigationHelper to respond to the page's navigation methods.
 
 Page specific logic should be placed in event handlers for the  
 <see cref="E:CIS160BeachCondoTake2.Common.NavigationHelper.LoadState"/>
 and <see cref="E:CIS160BeachCondoTake2.Common.NavigationHelper.SaveState"/>.
 The navigation parameter is available in the LoadState method 
 in addition to page state preserved during an earlier session.
</member>
<member name="T:CIS160BeachCondoTake2.SplitPage">
 <summary>
 A page that displays a group title, a list of items within the group, and details for
 the currently selected item.
 </summary>
</member>
<member name="P:CIS160BeachCondoTake2.SplitPage.DefaultViewModel">
 <summary>
 This can be changed to a strongly typed view model.
 </summary>
</member>
<member name="M:CIS160BeachCondoTake2.SplitPage.SplitPage_Unloaded(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
 <summary>
 Unhook from the SizedChanged event when the SplitPage is Unloaded.
 </summary>
</member>
<member name="M:CIS160BeachCondoTake2.SplitPage.NavigationHelper_LoadState(System.Object,CIS160BeachCondoTake2.Common.LoadStateEventArgs)">
 <summary>
 Populates the page with content passed during navigation.  Any saved state is also
 provided when recreating a page from a prior session.
 </summary>
 <param name="sender">
 The source of the event; typically <see cref="P:CIS160BeachCondoTake2.SplitPage.NavigationHelper"/>
 </param>
 <param name="e">Event data that provides both the navigation parameter passed to
 <see cref="M:Windows.UI.Xaml.Controls.Frame.Navigate(System.Type)"/> when this page was initially requested and
 a dictionary of state preserved by this page during an earlier
 session.  The state will be null the first time a page is visited.</param>
</member>
<member name="M:CIS160BeachCondoTake2.SplitPage.NavigationHelper_SaveState(System.Object,CIS160BeachCondoTake2.Common.SaveStateEventArgs)">
 <summary>
 Preserves state associated with this page in case the application is suspended or the
 page is discarded from the navigation cache.  Values must conform to the serialization
 requirements of <see cref="P:CIS160BeachCondoTake2.Common.SuspensionManager.SessionState"/>.
 </summary>
 <param name="sender">
 The source of the event; typically <see cref="P:CIS160BeachCondoTake2.SplitPage.NavigationHelper"/>
 </param>
 <param name="e">Event data that provides an empty dictionary to be populated with 
 serializable state.</param>
</member>
<member name="M:CIS160BeachCondoTake2.SplitPage.UsingLogicalPageNavigation">
 <summary>
 Invoked to determine whether the page should act as one logical page or two.
 </summary>
 <returns>True when the view state in question is portrait or snapped, false
 otherwise.</returns>
</member>
<member name="M:CIS160BeachCondoTake2.SplitPage.DetermineVisualState">
 <summary>
 Invoked to determine the name of the visual state that corresponds to an application
 view state.
 </summary>
 <returns>The name of the desired visual state.  This is the same as the name of the
 view state except when there is a selected item in portrait and snapped views where
 this additional logical page is represented by adding a suffix of _Detail.</returns>
 <remarks></remarks>
</member>
<member name="M:CIS160BeachCondoTake2.SplitPage.OnNavigatedTo(Windows.UI.Xaml.Navigation.NavigationEventArgs)">
 The methods provided in this section are simply used to allow
 NavigationHelper to respond to the page's navigation methods.
 
 Page specific logic should be placed in event handlers for the  
 <see cref="E:CIS160BeachCondoTake2.Common.NavigationHelper.LoadState"/>
 and <see cref="E:CIS160BeachCondoTake2.Common.NavigationHelper.SaveState"/>.
 The navigation parameter is available in the LoadState method 
 in addition to page state preserved during an earlier session.
</member>
<member name="T:CIS160BeachCondoTake2.Data.SampleDataItem">
 <summary>
 Generic item data model.
 </summary>
</member>
<member name="T:CIS160BeachCondoTake2.Data.SampleDataGroup">
 <summary>
 Generic group data model.
 </summary>
</member>
<member name="T:CIS160BeachCondoTake2.Data.SampleDataSource">
 <summary>
 Creates a collection of groups and items with content read from a static json file.
 
 SampleDataSource initializes with data read from a static json file included in the 
 project.  This provides sample data at both design-time and run-time.
 </summary>
</member>
</members>
</doc>
